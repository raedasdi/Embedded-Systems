// StepperMotorController.c starter file EE319K Lab 5
// Runs on TM4C123
// Finite state machine to operate a stepper motor.  
// Jonathan Valvano
// January 18, 2019

// Hardware connections (External: two input buttons and four outputs to stepper motor)
//  PA5 is Wash input  (1 means pressed, 0 means not pressed)
//  PA4 is Wiper input  (1 means pressed, 0 means not pressed)
//  PE5 is Water pump output (toggle means washing)
//  PE4-0 are stepper motor outputs 
//  PF1 PF2 or PF3 control the LED on Launchpad used as a heartbeat
//  PB6 is LED output (1 activates external LED on protoboard)

#include "SysTick.h"
#include "TExaS.h"
#include <stdint.h>
#include "../inc/tm4c123gh6pm.h"

void EnableInterrupts(void);
// edit the following only if you need to move pins from PA4, PE3-0      
// logic analyzer on the real board
#define PA4       (*((volatile unsigned long *)0x40004040))
#define PE50      (*((volatile unsigned long *)0x400240FC))
#define initial		0x00;
#define wipe2 		0x01;
#define wipe3 		0x02;
#define wipe4 		0x03;
#define wipe5 		0x04;
#define ret4			0x05;
#define ret3 			0x06;
#define ret2			0x07;
#define water2		0x08;
#define water3		0x09;
#define water4		0x0A;
#define water5		0x0B;
#define wret4			0x0C;
#define wret3			0x0D;
#define wret2			0x0E;


void SendDataToLogicAnalyzer(void){
  UART0_DR_R = 0x80|(PA4<<2)|PE50;
}

	struct State {
		uint32_t out;			// 2-bit output
		//uint32_t dwell; 	// time to delay
		uint32_t next[4];	// next if 2-bit input is 0-3
	};
		typedef const struct State State_t;
	
		State_t fsm[15] = {
	/*initial*/	 		{0x01, {initial, wipe2, water2, initial}}
			/*wipe2*/ 	{0x02, {wipe3, wipe3, wipe3, wipe3}}
			/*wipe38*/ 	{0x04, {wipe4, wipe4, wipe4, wipe4}}
			/*wipe4*/ 	{0x08, {wipe5, wipe5, wipe5, wipe5}}
			/*wipe5*/ 	{0x10, {ret4, ret4, ret4, ret4}}
			/*ret4*/ 		{0x08, {ret3, ret3, ret3, ret3}}
			/*ret3*/ 		{0x04, {ret2, ret2, ret2, ret2}}
			/*ret2*/ 		{0x02, {initial, initial, initial, initial}}
			/*water2*/ 	{0x22, {water3, water3, water3, water3}}
			/*water3*/ 	{0x24, {water4, water4, water4, water4}}
			/*water4*/ 	{0x28, {water5, water5, water5, water5}}
			/*water5*/ 	{0x30, {wret4, wret4, wret4, wret4}}
			/*wret4*/ 	{0x28, {wret3, wret3, wret3, wret3}}
			/*wret3*/ 	{0x24, {wret2, wret2, wret2, wret2}}
			/*wret2*/ 	{0x22, {initial, initial, initial, initial}}
		};
	
	volatile uint8_t k =0;

int main(void){ 
  TExaS_Init(&SendDataToLogicAnalyzer);    // activate logic analyzer and set system clock to 80 MHz
  SysTick_Init();   
// you initialize your system here
	SYSCTL_RCGCGPIO_R |= 0x31;
	k = 1;
  k = 1;																	// waiting for clock to start
	GPIO_PORTE_DIR_R |= 0x1F;
	GPIO_PORTE_DEN_R |= 0x1F;
	GPIO_PORTA_DIR_R &= ~(0x30);
	GPIO_PORTA_DEN_R |= 0x30;
	GPIO_PORTF_DIR_R |= 0x02;
	GPIO_PORTF_DEN_R |= 0x02;
	

			
		
	
	
  EnableInterrupts();   
  while(1){
// output
// wait
// input
// next		
  }
}