;****************** main.s ***************
; Program written by: ***Your Names**update this***
; Date Created: 2/4/2017
; Last Modified: 1/18/2019
; Brief description of the program
;   The LED toggles at 2 Hz and a varying duty-cycle
; Hardware connections (External: One button and one LED)
;  PE2 is Button input  (1 means pressed, 0 means not pressed)
;  PE3 is LED output (1 activates external LED on protoboard)
;  PF4 is builtin button SW1 on Launchpad (Internal) 
;        Negative Logic (0 means pressed, 1 means not pressed)
; Overall functionality of this system is to operate like this
;   1) Make PE3 an output and make PE2 and PF4 inputs.
;   2) The system starts with the the LED toggling at 2Hz,
;      which is 2 times per second with a duty-cycle of 30%.
;      Therefore, the LED is ON for 150ms and off for 350 ms.
;   3) When the button (PE1) is pressed-and-released increase
;      the duty cycle by 20% (modulo 100%). Therefore for each
;      press-and-release the duty cycle changes from 30% to 70% to 70%
;      to 90% to 10% to 30% so on
;   4) Implement a "breathing LED" when SW1 (PF4) on the Launchpad is pressed:
;      a) Be creative and play around with what "breathing" means.
;         An example of "breathing" is most computers power LED in sleep mode
;         (e.g., https://www.youtube.com/watch?v=ZT6siXyIjvQ).
;      b) When (PF4) is released while in breathing mode, resume blinking at 2Hz.
;         The duty cycle can either match the most recent duty-
;         cycle or reset to 30%.
;      TIP: debugging the breathing LED algorithm using the real board.
; PortE device registers
GPIO_PORTE_DATA_R  EQU 0x400243FC
GPIO_PORTE_DIR_R   EQU 0x40024400
GPIO_PORTE_AFSEL_R EQU 0x40024420
GPIO_PORTE_DEN_R   EQU 0x4002451C
; PortF device registers
GPIO_PORTF_DATA_R  EQU 0x400253FC
GPIO_PORTF_DIR_R   EQU 0x40025400
GPIO_PORTF_AFSEL_R EQU 0x40025420
GPIO_PORTF_PUR_R   EQU 0x40025510
GPIO_PORTF_DEN_R   EQU 0x4002551C
GPIO_PORTF_LOCK_R  EQU 0x40025520
GPIO_PORTF_CR_R    EQU 0x40025524
GPIO_LOCK_KEY      EQU 0x4C4F434B  ; Unlocks the GPIO_CR register
SYSCTL_RCGCGPIO_R  EQU 0x400FE608
count 			   EQU 0xA9054
countinc		   EQU 0x1520A8
count10			   EQU 0xA90
count20			   EQU 0x1520
count30			   EQU 0x1FB0;2
count40			   EQU 0x2A40
count50			   EQU 0x34D1
count60			   EQU 0x3F61
count70			   EQU 0x49F2
count80			   EQU 0x5481
count90			   EQU 0x5F12
;CountArray		   SPACE 5
;        		   DCD 10, 30, 50, 70, 90

       IMPORT  TExaS_Init
       THUMB
       AREA    DATA, ALIGN=2
;global variables go here
		

       AREA    |.text|, CODE, READONLY, ALIGN=2
       THUMB
       EXPORT  Start
Start
 ; TExaS_Init sets bus clock at 80 MHz
     BL  TExaS_Init ; voltmeter, scope on PD3
 ; Initialization goes here
	LDR R1, =SYSCTL_RCGCGPIO_R		;start clock for port E
	LDR R0, [R1]
	ORR R0, R0, #0x30
	STR R0, [R1]
	NOP
	NOP
	LDR R1, =GPIO_PORTE_DIR_R		;set PE3 as an output, PE2 as an input
	LDR R0, [R1]
	ORR R0, R0, #0x08
	STR R0, [R1]
	LDR R1, =GPIO_PORTE_DEN_R		;enable digital I/O for PE2, PE3
	LDR R0, [R1]
	ORR R0, R0, #0x0F
	STR R0, [R1]
	LDR R1, =GPIO_PORTF_DIR_R		;set PF4 as input
	MOV R0, #0x00
	STR R0, [R1]
	LDR R1, =GPIO_PORTF_DEN_R		;enable digital I/O for PF4
	LDR R0, [R1]
	ORR R0, #0x10
	STR R0, [R1]
	LDR R0, =GPIO_LOCK_KEY
	LDR R1, =GPIO_PORTF_LOCK_R
	STR R0, [R1]
	LDR R0, =GPIO_PORTF_CR_R
	LDR R1, [R0]
	ORR R1, #0xFF
	STR R1, [R0]
	LDR R0, =GPIO_PORTF_PUR_R
	LDR R1, [R0]
	ORR R1, #0x10
	STR R1, [R0]
	
	
;DELAY
;		ADD R14, R15, #0
;		LDR R2, =count
;AGAIN	LDR R1, =GPIO_PORTF_DATA_R	;checks if buttons is pressed,
		;LDR R0, [R1]				;branches to SWITCH if button is pressed
		;AND R0, #0x10
		;ROR R0, #4
		;CMP R0, #0
		;BEQ SWITCH	
		;SUBS R2,R2,#0x01
		;CMP R2, #0
		;BNE AGAIN
		;BX LR
		

     CPSIE  I    ; TExaS voltmeter, scope runs on interrupts

	;B SWITCH

SWITCH
		LDR R1, =GPIO_PORTF_DATA_R	;continually checks if button is pressed
		LDR R0, [R1]				;once button is released, count is incremented
		AND R0, #0x10
		ROR R0, #4
		CMP R0, #0
		BEQ Breathe
		B SWITCH
		BX LR
	 
	 
Breathe
		MOV R5, #10
		BL ten
SE1		MOV R5, #10
		BL twnty
SE2		MOV R5, #10
		BL trty
SE3		MOV R5, #10
		BL frty
SE4		MOV R5, #10
		BL ffty
SE5		MOV R5, #10
		BL sxty
SE6		MOV R5, #10
		BL svty
SE7		MOV R5, #10
		BL egty
SE8		MOV R5, #6
		BL nnty
SE9		MOV R5, #10
		BL egty
SE10	MOV R5, #10
		BL svty
SE11	MOV R5, #10
		BL sxty
SE12	MOV R5, #10
		BL ffty
SE13	MOV R5, #10
		BL frty
SE15	MOV R5, #10
		BL trty
SE16	MOV R5, #10
		BL twnty
SE17	MOV R5, #10
		BL ten
		B Breathe
		
		
		
		
		
		
		
		;10 % Duty Cycle (4 times)
		;ON
ten		LDR R1, =GPIO_PORTE_DATA_R		;toggle LED on
		LDR R0, [R1]
		EOR R0, R0, #0x08
		STR R0, [R1]
		LDR R2, =count10
Re1		LDR R1, =GPIO_PORTF_DATA_R	;checks if buttons is pressed,
		LDR R0, [R1]				;branches to SWITCH if button is pressed
		AND R0, #0x10
		ROR R0, #4
		CMP R0, #0
		BNE SWITCH	
		SUBS R2,R2,#0x01
		CMP R2, #0
		BNE Re1
		;OFF
		LDR R1, =GPIO_PORTE_DATA_R		;toggle LED off
		LDR R0, [R1]
		EOR R0, R0, #0x08
		STR R0, [R1]
		LDR R2, =count90
Re2		LDR R1, =GPIO_PORTF_DATA_R	;checks if buttons is pressed,
		LDR R0, [R1]				;branches to SWITCH if button is pressed
		AND R0, #0x10
		ROR R0, #4
		CMP R0, #0
		BNE SWITCH	
		SUBS R2,R2,#0x01
		CMP R2, #0
		BNE Re2
		SUBS R5, R5, #1
		CMP R5, #0
		BNE ten
		;B SE1
		BX LR
		
		
		;20% Duty Cycle (4 times)
		;ON
twnty	LDR R1, =GPIO_PORTE_DATA_R		;toggle LED on
		LDR R0, [R1]
		EOR R0, R0, #0x08
		STR R0, [R1]
		LDR R2, =count20
Re3		LDR R1, =GPIO_PORTF_DATA_R	;checks if buttons is pressed,
		LDR R0, [R1]				;branches to SWITCH if button is pressed
		AND R0, #0x10
		ROR R0, #4
		CMP R0, #0
		BNE SWITCH	
		SUBS R2,R2,#0x01
		CMP R2, #0
		BNE Re3
		;OFF
		LDR R1, =GPIO_PORTE_DATA_R		;toggle LED off
		LDR R0, [R1]
		EOR R0, R0, #0x08
		STR R0, [R1]
		LDR R2, =count80
Re4		LDR R1, =GPIO_PORTF_DATA_R	;checks if buttons is pressed,
		LDR R0, [R1]				;branches to SWITCH if button is pressed
		AND R0, #0x10
		ROR R0, #4
		CMP R0, #0
		BNE SWITCH	
		SUBS R2,R2,#0x01
		CMP R2, #0
		BNE Re4
		SUBS R5, R5, #1
		CMP R5, #0
		BNE twnty
		;B SE2
		BX LR
		
		
		;30% Duty Cycle (4 times)
		;ON
trty	LDR R1, =GPIO_PORTE_DATA_R		;toggle LED on
		LDR R0, [R1]
		EOR R0, R0, #0x08
		STR R0, [R1]
		LDR R2, =count30
Re5		LDR R1, =GPIO_PORTF_DATA_R	;checks if buttons is pressed,
		LDR R0, [R1]				;branches to SWITCH if button is pressed
		AND R0, #0x10
		ROR R0, #4
		CMP R0, #0
		BNE SWITCH	
		SUBS R2,R2,#0x01
		CMP R2, #0
		BNE Re5
		;OFF
		LDR R1, =GPIO_PORTE_DATA_R		;toggle LED off
		LDR R0, [R1]
		EOR R0, R0, #0x08
		STR R0, [R1]
		LDR R2, =count70
Re6		LDR R1, =GPIO_PORTF_DATA_R	;checks if buttons is pressed,
		LDR R0, [R1]				;branches to SWITCH if button is pressed
		AND R0, #0x10
		ROR R0, #4
		CMP R0, #0
		BNE SWITCH	
		SUBS R2,R2,#0x01
		CMP R2, #0
		BNE Re6
		SUBS R5, R5, #1
		CMP R5, #0
		BNE trty
		;B SE3
		BX LR
		
		
		;40% Duty Cycle (4 times)
		;ON
frty	LDR R1, =GPIO_PORTE_DATA_R		;toggle LED on
		LDR R0, [R1]
		EOR R0, R0, #0x08
		STR R0, [R1]
		LDR R2, =count40
Re11	LDR R1, =GPIO_PORTF_DATA_R	;checks if buttons is pressed,
		LDR R0, [R1]				;branches to SWITCH if button is pressed
		AND R0, #0x10
		ROR R0, #4
		CMP R0, #0
		BNE SWITCH	
		SUBS R2,R2,#0x01
		CMP R2, #0
		BNE Re11
		;OFF
		LDR R1, =GPIO_PORTE_DATA_R		;toggle LED off
		LDR R0, [R1]
		EOR R0, R0, #0x08
		STR R0, [R1]
		LDR R2, =count60
Re12	LDR R1, =GPIO_PORTF_DATA_R	;checks if buttons is pressed,
		LDR R0, [R1]				;branches to SWITCH if button is pressed
		AND R0, #0x10
		ROR R0, #4
		CMP R0, #0
		BNE SWITCH	
		SUBS R2,R2,#0x01
		CMP R2, #0
		BNE Re12
		SUBS R5, R5, #1
		CMP R5, #0
		BNE frty
		;B Breathe
		BX LR
		
		
		;50% Duty Cycle (4 times)
		;ON
ffty	LDR R1, =GPIO_PORTE_DATA_R		;toggle LED on
		LDR R0, [R1]
		EOR R0, R0, #0x08
		STR R0, [R1]
		LDR R2, =count50
Re13	LDR R1, =GPIO_PORTF_DATA_R	;checks if buttons is pressed,
		LDR R0, [R1]				;branches to SWITCH if button is pressed
		AND R0, #0x10
		ROR R0, #4
		CMP R0, #0
		BNE SWITCH	
		SUBS R2,R2,#0x01
		CMP R2, #0
		BNE Re13
		;OFF
		LDR R1, =GPIO_PORTE_DATA_R		;toggle LED off
		LDR R0, [R1]
		EOR R0, R0, #0x08
		STR R0, [R1]
		LDR R2, =count50
Re14	LDR R1, =GPIO_PORTF_DATA_R	;checks if buttons is pressed,
		LDR R0, [R1]				;branches to SWITCH if button is pressed
		AND R0, #0x10
		ROR R0, #4
		CMP R0, #0
		BNE SWITCH	
		SUBS R2,R2,#0x01
		CMP R2, #0
		BNE Re14
		SUBS R5, R5, #1
		CMP R5, #0
		BNE ffty
		;B Breathe
		BX LR
		
		
		
		;60% Duty Cycle (4 times)
		;ON
sxty	LDR R1, =GPIO_PORTE_DATA_R		;toggle LED on
		LDR R0, [R1]
		EOR R0, R0, #0x08
		STR R0, [R1]
		LDR R2, =count60
Re15	LDR R1, =GPIO_PORTF_DATA_R	;checks if buttons is pressed,
		LDR R0, [R1]				;branches to SWITCH if button is pressed
		AND R0, #0x10
		ROR R0, #4
		CMP R0, #0
		BNE SWITCH	
		SUBS R2,R2,#0x01
		CMP R2, #0
		BNE Re13
		;OFF
		LDR R1, =GPIO_PORTE_DATA_R		;toggle LED off
		LDR R0, [R1]
		EOR R0, R0, #0x08
		STR R0, [R1]
		LDR R2, =count40
Re16	LDR R1, =GPIO_PORTF_DATA_R	;checks if buttons is pressed,
		LDR R0, [R1]				;branches to SWITCH if button is pressed
		AND R0, #0x10
		ROR R0, #4
		CMP R0, #0
		BNE SWITCH	
		SUBS R2,R2,#0x01
		CMP R2, #0
		BNE Re16
		SUBS R5, R5, #1
		CMP R5, #0
		BNE sxty
		;B Breathe
		BX LR
		
		
		;70% Duty Cycle (4 times)
		;ON
svty	LDR R1, =GPIO_PORTE_DATA_R		;toggle LED on
		LDR R0, [R1]
		EOR R0, R0, #0x08
		STR R0, [R1]
		LDR R2, =count70
Re7		LDR R1, =GPIO_PORTF_DATA_R	;checks if buttons is pressed,
		LDR R0, [R1]				;branches to SWITCH if button is pressed
		AND R0, #0x10
		ROR R0, #4
		CMP R0, #0
		BNE SWITCH	
		SUBS R2,R2,#0x01
		CMP R2, #0
		BNE Re7
		;OFF
		LDR R1, =GPIO_PORTE_DATA_R		;toggle LED off
		LDR R0, [R1]
		EOR R0, R0, #0x08
		STR R0, [R1]
		LDR R2, =count30
Re8		LDR R1, =GPIO_PORTF_DATA_R	;checks if buttons is pressed,
		LDR R0, [R1]				;branches to SWITCH if button is pressed
		AND R0, #0x10
		ROR R0, #4
		CMP R0, #0
		BNE SWITCH	
		SUBS R2,R2,#0x01
		CMP R2, #0
		BNE Re8
		SUBS R5, R5, #1
		CMP R5, #0
		BNE svty
		;B Breathe
		BX LR
		
		
		
		;80% Duty Cycle (4 times)
		;ON
egty	LDR R1, =GPIO_PORTE_DATA_R		;toggle LED on
		LDR R0, [R1]
		EOR R0, R0, #0x08
		STR R0, [R1]
		LDR R2, =count80
Re17	LDR R1, =GPIO_PORTF_DATA_R	;checks if buttons is pressed,
		LDR R0, [R1]				;branches to SWITCH if button is pressed
		AND R0, #0x10
		ROR R0, #4
		CMP R0, #0
		BNE SWITCH	
		SUBS R2,R2,#0x01
		CMP R2, #0
		BNE Re17
		;OFF
		LDR R1, =GPIO_PORTE_DATA_R		;toggle LED off
		LDR R0, [R1]
		EOR R0, R0, #0x08
		STR R0, [R1]
		LDR R2, =count20
Re18	LDR R1, =GPIO_PORTF_DATA_R	;checks if buttons is pressed,
		LDR R0, [R1]				;branches to SWITCH if button is pressed
		AND R0, #0x10
		ROR R0, #4
		CMP R0, #0
		BNE SWITCH	
		SUBS R2,R2,#0x01
		CMP R2, #0
		BNE Re18
		SUBS R5, R5, #1
		CMP R5, #0
		BNE egty
		;BL Breathe
		BX LR
		
		
		;90% Duty Cycle (6 times)
		;ON
nnty	LDR R1, =GPIO_PORTE_DATA_R		;toggle LED on
		LDR R0, [R1]
		EOR R0, R0, #0x08
		STR R0, [R1]
		LDR R2, =count90
ReBO	LDR R1, =GPIO_PORTF_DATA_R	;checks if buttons is pressed,
		LDR R0, [R1]				;branches to SWITCH if button is pressed
		AND R0, #0x10
		ROR R0, #4
		CMP R0, #0
		BNE SWITCH	
		SUBS R2,R2,#0x01
		CMP R2, #0
		BNE ReBO
		;OFF
		LDR R1, =GPIO_PORTE_DATA_R		;toggle LED on
		LDR R0, [R1]
		EOR R0, R0, #0x08
		STR R0, [R1]
		LDR R2, =count90
ReBN	LDR R1, =GPIO_PORTF_DATA_R	;checks if buttons is pressed,
		LDR R0, [R1]				;branches to SWITCH if button is pressed
		AND R0, #0x10
		ROR R0, #4
		CMP R0, #0
		BNE SWITCH	
		SUBS R2,R2,#0x01
		CMP R2, #0
		BNE ReBN
		SUBS R5, R5, #1
		CMP R5, #0
		BNE nnty
		;B		Breathe
		BX LR
		
		
		
		
loop  
; main engine goes here

	LDR R1, =GPIO_PORTE_DATA_R		;toggle LED on
	LDR R0, [R1]
	EOR R0, R0, #0x08
	STR R0, [R1]
	
	BL SWITCH						;delay keeps LED on
	
	;LDR R1, =GPIO_PORTE_DATA_R		;toggle LED (off)
	;LDR R0, [R1]
	;EOR R0, R0, #0x08
	;STR R0, [R1]
	
	;BL DELAY						;delay keeps LED off
	
   
     B    loop

      
     ALIGN      ; make sure the end of this section is aligned
     END        ; end of file